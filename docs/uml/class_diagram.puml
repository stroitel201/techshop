@startuml ClassDiagram

scale 5000 width
scale 3000 height

class AWSLoader {
    -clientRegion: Region
    -bucketName: String
    -s3Client: S3Client
    +{method}AWSLoader(clientRegion: Region, String bucketName)
    +{method}UploadObject(file: MultipartFile)
}

interface CartDAO{

}

interface CategoryDAO{
  +{method}findByTitle(title: String)
}

interface ContactsDAO{
  +{method}findByUserAccount(userAccount: UserAccount)
}

interface OrderDAO{
  +{method}findByUserAccount(userAccount: UserAccount)
}

interface ProductDAO{
  +{method}findByCategoryAndAvailableOrderByName(category: Category, available: boolean, request: Pageable)
  +{method}findAllByNameContainsAndAvailableOrderByName(name: String, available: boolean, request: Pageable)
  +{method}findByAvailableOrderByName(available: boolean, request: Pageable)
}

interface TokenDAO{
  +{method}findByToken(token: String)
}

interface UserAccountDAO{
  +{method}findByEmail(email: String)
  +{method}findByName(name: String)
}

Package "Domain"{
    class Cart{
        -id: Long
        -userAccount: UserAccount
        -cartItems: List<CartItem>
        -deliveryIncluded: boolean
        -itemsCost: double
        +{method}Cart()
        +{method}Cart(userAccount: UserAccount)
        +{method}update(product: Product, newQuantity: int)
        -{method}removeItem(productId: long)
        +{method}findItem(productId: long)
        +{method}calculateItemsCost()
        +{method}clear()
        +{method}checkAvailability()
    }

    class CartItem{
        -pk: CartItemId
        -cart: Cart
        -product: Product
        -quantity: int
        +{method}CartItem()
        +{method}CartItem(cart: Cart, product: Product, quantity: int)
        +{method}calculateCost()
        +{method}setCart(cart: Cart)
        +{method}setProduct(product: Product)
    }

    class CartItemId{
        -cartId: long
        -productId: long
        +{method}CartItemId()
        +{method}CartItemId(cartId: long, productId: long)
    }

    class Category{
        -id: Long
        -title: String
    }

    class Contacts{
        -id: Long
        -userAccount: UserAccount
        -phone: String
        -address: String
        -region: String
        +{method}Contacts(userAccount: UserAccount, phone: String, region: String)
    }

    class Order{
        -id: Long
        -userAccount: UserAccount
        -orderItems: List<OrderItem>
        -isExecuted: boolean
        -dateCreated: Date
        -deliveryCost: int
        -deliveryIncluded: boolean
        -totalPrice: double
        +{method}Order(userAccount: UserAccount)
        +{method}calculateTotalPrice()
    }

    class OrderItem{
        -pk: OrderItemId
        -order: Order
        -product Product
        -quantity: int
        +{method}OrderItem(order: Order, product: Product, quantity: int)
        +{method}calculateCost()
    }

    class OrderItemId{
        -orderId: long
        -productId: long
        +{method}OrderItemId(orderId: long, productId: long)
    }

    class Product{
        -id: Long
        -category: Category
        -name: String
        -description: String
        -price: Integer
        -pictureRef: String
        -available: boolean
        +{method}Product()
    }

    class Role{
        -id: Long
        -title: String
        -users: Set<UserAccount>
        -Roles: enum
    }

    class Token{
        -id: Long
        -token: String
        -isValid: boolean
        +{method}Token(token: String)
    }

    class UserAccount{
        -id: Long
        -email: String
        -password: String
        -name: String
        -active: boolean
        -contacts: Contacts
        -cart: Cart
        -roles: Set<Role>
    }
}

Package "DTO"{
    class AdminProductDto{
        -id: Long
        -name: String
        -description: String
        -category: String
        -pictureRef: String
        -price: Integer
        -isAvailable: boolean
        +{method}AdminProductDto(product: Product)
    }

    class AdminUserDto{
        -id: Long
        -email: String
        -password: String
        -name: String
        -active: boolean
        -roles: Set<Role>
    }

    class AuthenticationRequestDto{
        -username: String
        -password: String
    }

    class BooleanDto{
        -boolValue: boolean
    }

    class CartDto{
        -list<CartItemDto>
        -deliveryIncluded: boolean
        -itemsCount: int
        -itemsCost: double
        +{method}CartDto(cart: Cart)
    }

    class CartItemDto{
        -product: UserProductDto
        -quantity: Integer
        +{method}CartItemDto(cartItem: cartItem)
    }

    class CategoryDto{
        -id: Long
        -title: String
        +{method}CategoryDto(category: Category)
    }

    class ContactsDto{
        -phone: String
        -address: String
        -region: String
        +{method}ContactsDto(contacts: Contacts)
    }

    class ExAddItemDto{
        -id: Long
        -quantity: Integer
    }

    class ExProductDto{
        -name: String
        -description: String
        -category: String
        -price: Integer
    }

    class OrderDto{
        -orderId: Long
        -userId: Long
        -list: List<OrderItemDto>
        -isDeliveryIncluded: boolean
        -isExecuted: boolean
        -deliveryCost: double
        -dateCreated: Date
        -totalPrice: double
        +{method}OrderDto(order: Order)
    }

    class OrderItemDto{
        -product: UserProductDto
        -quantity: Integer
        +{method}OrderItemDto(orderItem OrderItem)
    }

    class RegisterUserDto{
        -username: String
        -password: String
        -email: String
        -phone: String
        -address: String
        -region: String
    }

    class UserAccountDto{
        -id: Long
        -username: String
        -email: String
        +{method}UserAccountDto(userAccount: UserAccount)
    }

    class UserProductDto{
        -id: Long
        -name: String
        -description: String
        -category: String
        -pictureRef:String
        -price: Integer
        +{method}UserProductDto(product: Product)
    }
}

Package "Configs"{
    class SecurityConfig{
        -jwtTokenProvider: JwtTokenProvider
        -tokenService: TokenService
        -ADMIN_ENDPOINT: String
        -USER_ENDPOINT: String
        -AUTH_ENDPOINT: String
        -MAIN_ENDPOINT: String
        +{method}SecurityConfig(jwtTokenProvider: JwtTokenProvider, tokenService: TokenService)
        +{method}configure(http: HttpSecurity)
    }
    class MvcConfig{
        +{method}addCorsMappings(registry: CorsRegistry)
    }
}

interface CartService{
    +{method}getCartOrCreate(userEmail: String)
    +{method}addToCart(userEmail: String, productId: long, quantity: int)
    +{method}setDelivery(userEmail: String, DeliveryIncluded: boolean)
    +{method}clearCart(userEmail: String)
}

interface CategoryService{
    +{method}findAll()
    +{method}findById(categoryId long)
    +{method}findByTitle(title: String)
    +{method}create(newCategory: Category)
    +{method}update(categoryId: long, changedCategory: Category)
}

interface ContactsService{
    +{method}getContacts(userLogin: String)
    +{method}updateUserContacts(changedContacts: Contacts, userLogin: String)
}

interface OrderService{
    +{method}getAllOrders()
    +{method}getUserOrders(userAccount: UserAccount)
    +{method}getById(id: Long)
    +{method}createOrder(userAccount: UserAccount)
    +{method}setExecuted(id: Long, isExecuted: Boolean)
}

interface ProductService{
    +{method}findAll()
    +{method}findByCategory(category: Category, request: PageRequest)
    +{method}findByName(name: String, request: PageRequest)
    +{method}findByAvailability(available: String, request: PageRequest)
    +{method}getProduct(productId: long)
    +{method}findById(productId: long)
    +{method}create(product: Product, categoryTitle: String)
    +{method}update(productId: long, product: Product, categoryTitle: String)
    +{method}updateAvailability(productIdsByAvailability: Map<Boolean, Long<Long>>)
    +{method}delete(id: long)
}

interface TokenService{
    +{method}findByToken(token: String)
    +{method}save(Token token)
    +{method}delete(token Token)
}

interface UserAccountService{
    +{method}findByEmail(email: String)
    +{method}create(userAccount: UserAccount)
    +{method}findByUsername(name: String)
    +{method}findById(id: Long)
    +{method}getAllUsers()
    +{method}deactivate(userAccount: UserAccount)
    +{method}activate(userAccount: UserAccount)
}

class CartServiceImpl{
    -cartDAO: CartDAO
    -userAccountService: UserAccountService
    -productService: ProductService
    +{method}CartServiceImpl(cartDAO: CartDAO, userAccountService: UserAccountService, productService: ProductService)
    +{method}getCartOrCreate(userEmail: String)
    +{method}addToCart(userEmail: String, productId: long, quantity: int)
    +{method}setDelivery(userEmail: String, DeliveryIncluded: boolean)
    +{method}clearCart(userEmail: String)
}

class CategoryServiceImpl{
    -categoryDAO: CategoryDAO
    +{method}CategoryServiceImpl(categoryDAO: CategoryDAO)
    +{method}findAll()
    +{method}findById(categoryId long)
    +{method}findByTitle(title: String)
    +{method}create(newCategory: Category)
    +{method}update(categoryId: long, changedCategory: Category)
}

class ContactsServiceImpl{
    -contactsDAO: ContactsDAO
    -userAccountService: UserAccountService
    +{method}ContactsServiceImpl(contactsDAO: ContactsDAO, userAccountService: UserAccountService)
    +{method}getContacts(userLogin: String)
    +{method}updateUserContacts(changedContacts: Contacts, userLogin: String)
}

class OrderServiceImpl{
    -orderDAO: OrderDAO
    -cartService: CartService
    +{method}getAllOrders()
    +{method}getUserOrders(userAccount: UserAccount)
    +{method}getById(id: Long)
    +{method}createOrder(userAccount: UserAccount)
    +{method}setExecuted(id: Long, isExecuted: Boolean)
}

class ProductServiceImpl{
    -productDAO: ProductDAO
    -categoryService: CategoryService
    +{method}ProductServiceImpl(productDAO: ProductDAO, categoryService: CategoryService)
    +{method}findAll()
    +{method}findByCategory(category: Category, request: PageRequest)
    +{method}findByName(name: String, request: PageRequest)
    +{method}findByAvailability(available: String, request: PageRequest)
    +{method}getProduct(productId: long)
    +{method}findById(productId: long)
    +{method}create(product: Product, categoryTitle: String)
    +{method}update(productId: long, product: Product, categoryTitle: String)
    +{method}updateAvailability(productIdsByAvailability: Map<Boolean, Long<Long>>)
    +{method}delete(id: long)
    -{method}saveInternal(changed: Product, categoryTitle: String, availability: boolean)
}

class TokenServiceImpl{
    -tokenDAO: TokenDAO
    +{method}findByToken(token: String)
    +{method}save(Token token)
    +{method}delete(token Token)
}

class UserAccountServiceImpl{
    -userAccountDAO: UserAccountDAO
    +{method}findByEmail(email: String)
    +{method}create(userAccount: UserAccount)
    +{method}findByUsername(name: String)
    +{method}findById(id: Long)
    +{method}getAllUsers()
    +{method}deactivate(userAccount: UserAccount)
    +{method}activate(userAccount: UserAccount)

}

class JwtUserDetailsService{
    -userAccountService: UserAccountService
    +{method}loadUserByUsername(username: String)
}

class JwtUserFactory{
    +{method}JwtUserFactory()
    +{method}create(userAccount: UserAccount)
    -{method}mapToGrantedAuthorities(set: Set<Role>)
}

class JwtUser{
    -id: Long
    -email: String
    -password: String
    -name: String
    -active: boolean
    -authorities: Collection<? extends GrantedAuthority>
    +{method}JwtUser(id: Long, name: String, email: String, password: String, active: boolean, authorities: Collection<? extends GrantedAuthority>)
    +{method}isAccountNonExpired()
    +{method}isAccountNonLocked()
    +{method}isCredentialsNonExpired()
    +{method}isEnabled()
}

class JwtTokenProvider{
    -secret: String
    -validityInMillis: Long
    -userDetailsService: UserDetailsService
    -{method}init()
    +{method}createToken(username: String)
    +{method}getAuthentication(token: String)
    +{method}getUsername(token: String)
    +{method}resolveToken(req: HttpServletRequest)
    +{method}validateToken(token: String)
}

class JwtTokenFilter{
    -jwtTokenProvider: JwtTokenProvider
    -tokenService: TokenService
    +{method}doFilter(servletRequest: ServletRequest, servletResponse: ServletResponse)
}

class JwtConfigurer{
    -jwtTokenProvider: JwtTokenProvider
    -tokenService: TokenService
    +{method}JwtConfigurer(jwtTokenProvider: JwtTokenProvider, tokenService: TokenService)
    +{method}configure(HttpSecurity: httpSecurity)
}

class JwtAuthenticationException{
    +{method}JwtAuthenticationException()
}

class AuthenticationRestController{
    -authenticationManager: AuthenticationManager
    -jwtTokenProvider: JwtTokenProvider
    -userAccountService: UserAccountService
    -tokenService: TokenService
    +{method}login(requestDto: AuthenticationRequestDto)
    +{method}register(registerUserDto: RegisterUserDto)
}

class MainRestController{
    -categoryService: CategoryService
    -productService: ProductService
    +{method}getCategories()
    +{method}getCategory(id: Long)
    +{method}getProducts(name: String, categoryTitle: String, pageNumber: int, pageSize: int)
    +{method}getProduct(id: Long)
}

class UserRestController{
    -userAccountService: UserAccountService
    -jwtTokenProvider: JwtTokenProvider
    -tokenService: TokenService
    -cartService: CartService
    -contactsService: ContactsService
    -orderService: OrderService
    +{method}getUser(servletRequest: HttpServletRequest)
    +{method}getUserContacts(servletRequest: HttpServletRequest)
    +{method}updateUserContacts(contactsDto: ContactsDto, servletRequest: HttpServletRequest)
    +{method}getUserCart(servletRequest: HttpServletRequest)
    +{method}addItemToUserCart(exAddItemDto: ExAddItemDto, servletRequest: HttpServletRequest)
    +{method}setDeliveryToUserCart(booleanDto: BooleanDto, servletRequest: HttpServletRequest)
    +{method}clearUserCart(servletRequest: HttpServletRequest)
    +{method}logout(servletRequest: HttpServletRequest)
    +{method}createOrder(servletRequest: HttpServletRequest)
    -{method}getUserAccountByJWTToken(servletRequest: HttpServletRequest)
}

class AdminRestController{
    -awsLoader: AWSLoader
    -userAccountService: UserAccountService
    -cartService: CartService
    -contactsService: ContactsService
    -categoryService: CategoryService
    -productService: ProductService
    -orderService: OrderService
    +{method}getUsers()
    +{method}getUserById(id: Long)
    +{method}activateUser(id: Long)
    +{method}deactivateUser(id: Long)
    +{method}getUserCart(id: Long)
    +{method}getUserContacts(id: Long)
    +{method}getCategories()
    +{method}addCategory(categoryDto: CategoryDto)
    +{method}getCategory(id: Long)
    +{method}updateCategory(id: Long, categoryDto: CategoryDto)
    +{method}getProducts()
    +{method}addProduct(exProductDto: ExProductDto, file: MultipartFile)
    +{method}getProduct(id: Long)
    +{method}availableProduct(id: Long)
    +{method}updateProduct(exProductDto: ExProductDto, file: MultipartFile)
    +{method}deleteProduct(id: Long)
    +{method}getOrders(id: Long)
    +{method}getOrder(id: Long)
    +{method}setExecutedOrder(id: Long, booleanDto: BooleanDto)
}

CartService <|-- CartServiceImpl
CategoryService <|-- CategoryServiceImpl
ContactsService <|-- ContactsServiceImpl
OrderService <|-- OrderServiceImpl
ProductService <|-- ProductServiceImpl
TokenService <|-- TokenServiceImpl
UserAccountService <|-- userAccountServiceImpl

CartDAO *-- CartServiceImpl
CategoryDAO *-- CategoryServiceImpl
ContactsDAO *-- ContactsServiceImpl
OrderDAO *-- OrderServiceImpl
ProductDAO *-- ProductServiceImpl
TokenDAO *-- TokenServiceImpl
UserAccountDAO *-- UserAccountServiceImpl

UserAccountService *-- JwtUserDetailsService
JwtUserDetailsService *-- JwtTokenProvider
JwtTokenProvider *-- JwtTokenFilter
TokenService *-- JwtTokenFilter
JwtTokenProvider *-- JwtConfigurer
TokenService *-- JwtConfigurer
JwtTokenProvider *-- SecurityConfig
TokenService *-- SecurityConfig

AWSLoader *-- AdminRestController
UserAccountService *-- AdminRestController
CartService *-- AdminRestController
ContactsService *-- AdminRestController
CategoryService *-- AdminRestController
ProductService *-- AdminRestController
OrderService *-- AdminRestController

UserAccountService *-- UserRestController
JwtTokenProvider *-- UserRestController
TokenService *-- UserRestController
CartService *-- UserRestController
ContactsService *-- UserRestController
OrderService *-- UserRestController

CategoryService *-- MainRestController
ProductService *-- MainRestController

JwtTokenProvider *-- AuthenticationRestController
UserAccountService *-- AuthenticationRestController
TokenService *-- AuthenticationRestController


@enduml